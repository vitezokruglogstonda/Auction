// <auto-generated />
using System;
using Auction.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Auction.Server.Migrations
{
    [DbContext(typeof(AuctionContext))]
    partial class AuctionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Auction.Server.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExpiryDate");

                    b.Property<decimal?>("SoldPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("Starting Price");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Auction.Server.Models.ArticlePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Picture Data");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlePicture");
                });

            modelBuilder.Entity("Auction.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("Balance");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Birth Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("First Name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Last Name");

                    b.Property<bool>("OnlineStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("Online");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Password Hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Password Salt");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Profile Picture");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Auction.Server.Models.Article", b =>
                {
                    b.HasOne("Auction.Server.Models.User", "Creator")
                        .WithMany("CreatedArticles")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Auction.Server.Models.User", "Customer")
                        .WithMany("BoughtArticles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Auction.Server.Models.ArticlePicture", b =>
                {
                    b.HasOne("Auction.Server.Models.Article", "Article")
                        .WithMany("Pictures")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Auction.Server.Models.Article", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Auction.Server.Models.User", b =>
                {
                    b.Navigation("BoughtArticles");

                    b.Navigation("CreatedArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
